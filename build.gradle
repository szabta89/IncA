//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'base'

import de.itemis.mps.gradle.*

// Specify the required MPS version
ext.mpsVersion = '2019.2+'

// Specify the required mbeddr version or branch name
ext.mbeddrVersion = '2019.2.22376.b95ff6b'

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    if (project.hasProperty("teamcity")) {
        ext.ciBuild = true
    } else {
        ext.ciBuild = false
    }
}

def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11, but you are currently using ${JavaVersion.current()}.\nPlease do one of the following:\n"
            + "  * Use project property java11_home to point to a Java 11 JDK\n"
            + "  * Use the environment variable JAVA11_HOME to point to a Java 11 JDK\n"
            + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

ext.jdk_home = jdk_home
logger.info 'Using JDK at {}', jdk_home


// Default repository credentials
if (!project.hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
    ext.nexusPassword = ''
}
logger.info 'Repository username: {}', project.nexusUsername

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots',
]

// artifacts version. this is the default versioning that is used
def minor = '1'
def major = '0'
def commitHash = GitBasedVersioning.getGitShortCommitHash()
version = "$major.$minor.${GitBasedVersioning.getGitCommitCount()}.$commitHash"

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository


configurations {
    mps
    mbeddrPlatformArtifacts
    ant_lib
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    mbeddrPlatformArtifacts "com.mbeddr:allScripts:$mbeddrVersion"
    mbeddrPlatformArtifacts "com.mbeddr:platform:$mbeddrVersion"
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

repositories {
        mavenLocal()
        for (repoUrl in project.dependencyRepositories) {
            maven {
                url repoUrl
            }
        }
}

ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
    true
})

ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(jdk_home, 'bin/java')

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

def artifactsDir = new File(rootDir, 'artifacts')
def buildDir = new File(rootDir, 'build')

ext.mps_home =  '-Dmps_home=' + resolveMps.destinationDir.getAbsolutePath()
ext.mps_home_ext =  '-Dmps.home=' + resolveMps.destinationDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_dir = '-Dartifacts.root=' + artifactsDir
ext.pluginVersion = "-Dversion=" + version
ext.buildDate = "-DbuildDate=" + new Date().toString()

// ___________________ utilities ___________________
File scriptFile(String relativePath) {
    new File("$buildDir/$relativePath")
}

def defaultScriptArgs = [mps_home, mps_home_ext, build_dir, artifacts_dir, ext.buildDate, ext.pluginVersion]

task resolveMpsArtifacts(type: Copy) {
    dependsOn configurations.mbeddrPlatformArtifacts
    from {
        configurations.mbeddrPlatformArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
    doFirst { delete artifactsDir }
}

task build_allScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]){
     script scriptFile('allScripts/build.xml')
     scriptArgs = defaultScriptArgs
     scriptClasspath = buildScriptClasspath
}

task build_languages(type: BuildLanguages, dependsOn: [build_allScripts]){
     script scriptFile('code/build.xml')
     scriptArgs = defaultScriptArgs
     scriptClasspath = buildScriptClasspath
}

task install_modelchecker(type: Copy, dependsOn: build_languages) {
    from zipTree(project.file("$artifactsDir/org.inca.build/org.inca.modelchecker.zip"))
    into "$buildDir/mps/plugins"
}

task run_tests(type: TestLanguages, dependsOn: install_modelchecker) {
    description "Will execute all tests from command line"
    script scriptFile('test/build.xml')
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveMpsArtifacts
    defaults rootProject.file('libraries.properties')
    overrides rootProject.file('libraries.overrides.properties')
    destination file('code/.mps/libraries.xml')
}

defaultTasks 'build_languages', 'generateLibrariesXml'

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
}
dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
}
